<?php

/**
 * @file
 * boolboost_fix_owlcarousel.module
 */

/**
 * Implements hook_field_formatter_info().
 */
function boolboost_fix_owlcarousel_field_formatter_info()
{
  return array(
    'owlcarousel_image_link_formatter' => array(
      'label' => t('Owl Carousel (link)'),
      'field types' => array('image'),
      'settings' => array(
        'settings_group' => 'owlcarousel_settings_default',
        'image_style' => 'large',
        'trim_length' => '',
      ),
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function boolboost_fix_owlcarousel_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state)
{
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  $element['settings_group'] = array(
    '#type' => 'select',
    '#title' => t('Settings Group'),
    '#description' => t('Select the settings group to apply.'),
    '#default_value' => $settings['settings_group'],
    '#options' => owlcarousel_instance_callback_list(),
  );

  if ($field['type'] == 'image') {
    $element['image_style'] = array(
      '#type' => 'select',
      '#title' => t('Image Style'),
      '#description' => t('Apply image style.'),
      '#default_value' => $settings['image_style'],
      '#options' => image_style_options(),
    );
  }

  if (strpos($field['type'], 'text_') !== false) {
    $element['trim_length'] = array(
      '#title' => t('Trim length'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['trim_length'],
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }

  if ($field['type'] == 'field_collection') {
    $entity_type = entity_get_info('field_collection_item');
    $options = array();
    foreach ($entity_type['view modes'] as $mode => $info) {
      $options[$mode] = $info['label'];
    }

    $element['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $options,
      '#default_value' => $settings['view_mode'],
      '#description' => t('Select the view mode'),
    );
  }

  if ($field['type'] == 'entityreference') {
    $entity_type = entity_get_info($field['settings']['target_type']);
    $options = array();
    foreach ($entity_type['view modes'] as $mode => $info) {
      $options[$mode] = $info['label'];
    }

    $element['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $options,
      '#default_value' => $settings['view_mode'],
      '#description' => t('Select the view mode'),
    );
  }

  if ($field['type'] == 'paragraphs') {
    $entity_type = entity_get_info('paragraphs_item');
    $options = array();
    foreach ($entity_type['view modes'] as $mode => $info) {
      $options[$mode] = $info['label'];
    }

    $element['view_mode'] = array(
      '#type' => 'select',
      '#title' => t('View mode'),
      '#options' => $options,
      '#default_value' => $settings['view_mode'],
      '#description' => t('Select the view mode'),
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function boolboost_fix_owlcarousel_field_formatter_settings_summary($field, $instance, $view_mode)
{
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $message = '@settings applied to carousel instance.';

  if ($field['type'] == 'image') {
    $message = '@settings with image style @style applied to carousel instance.';
  }

  if ($field['type'] == 'field_collection' || $field['type'] == 'entityreference' || $field['type'] == 'paragraphs') {
    $message = '@settings applied to carousel instance on @view_mode view mode.';
    $summary = t($message, array(
      '@settings' => $settings['settings_group'],
      '@view_mode' => $settings['view_mode'],
    ));
  } else {
    $summary = t($message, array(
      '@settings' => $settings['settings_group'],
      '@style' => $settings['image_style'],
    ));
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function boolboost_fix_owlcarousel_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)
{
  $element = array();
  $settings = $display['settings'];

  // Format carousel settings.
  $items_group = FALSE;
  $settings_group = array(
    'instance' => $settings['settings_group'],
    'id' => 'owlcarousel-fields-' . $instance['id'],
  );

  // Format carousel items.
  switch ($field['type']) {
    case 'image':
      foreach ($items as $item) {
        $vars = array(
          'path' => $item['uri'],
          'width' => isset($item['width']) ? $item['width'] : '',
          'height' => isset($item['height']) ? $item['height'] : '',
          'alt' => $item['alt'],
          'title' => $item['title'],
        );

        if (empty($settings['image_style'])) {
          $theme = 'image';
        } else {
          $theme = 'image_style';
          $vars += array('style_name' => $settings['image_style']);
        }

        $items_group[]['row'] = l(theme($theme, $vars), file_create_url($item['uri']), array(
          'html' => TRUE,
          'attributes' => array(
            'class' => 'fancybox',
            'rel' => 'group-' . $field['field_name']
          )
        ));
      }
      break;
  }

  // Only render if we have items.
  if ($items_group) {
    $element[] = array(
      '#theme' => 'owlcarousel',
      '#items' => $items_group,
      '#settings' => $settings_group,
    );
  }

  return $element;
}
